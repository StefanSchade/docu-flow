# Use an official Ubuntu image
FROM ubuntu:latest

# Set environment variables to non-interactive
ENV DEBIAN_FRONTEND=noninteractive

# Set proxy environment variables
ARG http_proxy
ARG https_proxy
ARG no_proxy
ENV http_proxy=${http_proxy}
ENV https_proxy=${https_proxy}
ENV no_proxy=${no_proxy}

# basic dependencies
RUN apt-get update && \
    apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    wget \
    vim \
    gnupg2 \
    software-properties-common \
    build-essential \
    bash \
    jq \
    git \
    python3 \
    python3-pip \
    python3-venv \
    enchant-2 \
    aspell \
    aspell-en \
    aspell-de \
    libenchant-2-2 \
    libglib2.0-dev \
    tesseract-ocr \    
    libtesseract-dev \
    asciidoctor && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory for the project
WORKDIR /workspace

# Copy all scripts except .cmd files to /workspace/scripts
COPY scripts/*.sh /workspace/scripts/

# Set execute permissions on all .sh scripts
RUN chmod +x /workspace/scripts/*.sh

# Copy the requirements file
COPY requirements*.txt /workspace

# Create and activate a virtual environment and install dependencies
RUN python3 -m venv /workspace/venv && \
    /bin/bash -c "source /workspace/venv/bin/activate && \
    pip install --no-cache-dir -r /workspace/requirements.txt && \
    pip install --no-cache-dir -r /workspace/requirements-dev.txt && \
    pip list"

# Create a non-root user 'developer'
RUN groupadd -r developer && useradd -m -r -g developer developer

# Ensure the 'developer' user owns the workspace
RUN chown -R developer:developer /workspace

# Switch to the 'developer' user
USER developer

# Start process
CMD ["/bin/bash"]
