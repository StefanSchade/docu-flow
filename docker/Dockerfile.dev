# Use an official Ubuntu image
FROM ubuntu:latest

# Set environment variables to non-interactive
ENV DEBIAN_FRONTEND=noninteractive

# Set proxy environment variables
ARG http_proxy
ARG https_proxy
ARG no_proxy
ENV http_proxy=${http_proxy}
ENV https_proxy=${https_proxy}
ENV no_proxy=${no_proxy}

# basic dependencies
RUN apt-get update \
    && apt-get install -y \
       apt-transport-https \
       ca-certificates \
       sudo \
       curl \
       wget \
       vim \
       gnupg2 \
       software-properties-common \
       build-essential \
       bash \
       jq \
       git \
       python3 \
       python3-pip \
       python3-venv \
       enchant-2 \
       aspell \
       aspell-en \
       aspell-de \
       libenchant-2-2 \
       libglib2.0-dev \
       tesseract-ocr \    
       libtesseract-dev \
       asciidoctor && \
    apt-get clean && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \
    && add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable" \
    && apt-get update && apt-get install -y \
       docker-ce-cli \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory for the project
WORKDIR /workspace

# Copy the requirements file
COPY requirements*.txt /workspace

# Create and activate a virtual environment and install dependencies
RUN python3 -m venv /workspace/venv && \
    /bin/bash -c "source /workspace/venv/bin/activate && \
    pip install --no-cache-dir -r /workspace/requirements.txt && \
    pip install --no-cache-dir -r /workspace/requirements-dev.txt && \
    pip list"

# add groups developer and docker and user developer
RUN groupadd -r developer && groupadd -r docker && \
    useradd -u 999 -r -g developer -G docker -m developer && \
    usermod -aG sudo developer

# Allow the 'developer' user to use sudo without a password
RUN echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Ensure the 'developer' user owns the workspace
RUN chown -R developer:developer /workspace

# Switch to the 'developer' user
USER developer

# Start process
CMD ["/bin/bash"]
